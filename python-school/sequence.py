#문자열 연속적(sequence) 활용


a = [1,2,3,4,5]
b = [6,7,8,9,10]
print(a+b)

#range만으로는 리스트 결합이 안되고, list나 tuple로 묶어야 함
#a = range(10) + range(11,20)
#print(a)

#리스트 튜플 합치기
print(list(range(10)) + list(range(11,20)))
print(tuple(range(10)) + tuple(range(11,20)))

#문자열끼리는 +연산을 하면 결합해 줌
print('hello ' + 'world!')
#str과 int와는 합치는 게 안됨
#print('hello ' + 10)
# int type을 str로 변환해준다
print('hello ' + str(10))

#리스트를 *3번 더 반복해서 만들어 줌
x = [1,2,3,4,5] *3
print(x)

x = [1,2,3,4,5,6,7,8]
#아이템의 갯수(길이)
print(len(x))

#문자열이라면 갯수를 구함
h = "Hello world!"
print(len(h))

#x변수 (리스트)에서 3번째 인덱스(배열)의 값을 가져온다
print(x[3])

#문자열도 인덱스로 접근이 가능
print(h[0])
#문자열의 마지막부터 접근 -1
print(h[-1])

print("_" * 80)

#len()함수 이용해서 마지막 값 구한다음에 -1 해주면 마지막 배열값이 된다
print(h[len(h)-1])

a = [1,2,3,4,5]
print(a)
#인덱스를 이용해서 배열에 접근해서 값을 변경할 수 있음
a[0] = 10
a[1] = 20
a[2] = 30
a[3] = 40
a[4] = 50
print(a)

del a[2] #unset
print(a)

#tuple 정의
#b = tuple(10, 20, 30, 40, 50)
#print(b)
#tuple 은 바꿀 수 없음 // 리스트와 다른점
#b[0] = 100 #수정 안됨
#del b[0]  # 삭제 안됨

#slicing
print("_" * 80)
a = [1,2,3,4,5,6,7,8,9]
#슬라이싱 시작:끝
print(a[0:4]) 
#슬라이싱 시작:끝:스텝값 , 마지막파라미터 만큼 표시
print(a[2:8:3])
#시작을 생략하면 처음부터 표시
print(a[:7])
#마지막을 생략하면 시작 인덱스부터 마지막까지 표시
print(a[7:])
#시작:끝 을 생략시 전체 표시
print(a[:])
# 같은 결과
#print(a[::])

#끝을 생략하면 시작 인덱스부터 스텝값 만큼 표시
print(a[3::2])
#시작:끝 생략하고 스텝값만 표시하면 전체 표시하면서 스텝값만큼만 표시
print(a[::2])

s = "Hello world!"
print(s[::2])

a = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
#슬라이싱을 이용해서 리스트의 내의 인덱스 내용을 바꿀 수 있음
a[2:5] = ['a','b','c']
print(a)

#절취선
print("_" * 80)
print(len(a)) #슬라이싱으로 넣어주기 전에는 길이 10
#슬라이싱을 이용해서 같은 값을 넣어주면 길이가 달라진다
a[2:5] = ['a']
print(a)
print(len(a))  #슬라이싱으로 넣어준 후에는 길이 8

#스텝값을 주면 스텝값 만큼 배열을 건너서 'a', 'b', 'c'를 넣어준다 
a[2:8:2] = ['a','b','c']
print(a)

del a[2:5] #u2~5째까지 지워짐
print(a)


year = [2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018]
population = [10249679, 10195318, 10143645, 10103233, 10022181, 9930616, 9857426, 9838892]

print(year[5:8])
print(population[5:8])
#또는 
print(year[-3:])
print(population[-3:])

n = -32, 75, 97, -10, 9, 32, 4, -15, 0, 76, 14, 2
print(n[1::2])
#또는
print(n[1:len(n):2])