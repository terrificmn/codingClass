페도라에서 LAMP 설치하기 
**참고: LAMP란?
  Linux
  Apache
  Mariadb (or mysql)
  Php

_____________________________________________________________________________________________________
_____________________________________________________________________________________________________
HTTPD (apache) 설치
  $ sudo dnf -y install httpd
서버 시작은
  $ systemctl start httpd.service 

참고
https://docs.fedoraproject.org/en-US/quick-docs/getting-started-with-apache-http-server/index.html


_____________________________________________________________________________________________________
_____________________________________________________________________________________________________
php 설치 (common extensions 포함)
  $ sudo dnf -y install php php-cli php-php-gettext php-mbstring php-mcrypt php-mysqlnd php-pear php-curl php-gd php-xml php-bcmath php-zip


php 버전 확인
  $ php -v

_____________________________________________________________________________________________________
_____________________________________________________________________________________________________
mariadb 설치
  $ dnf install mariadb-server
or (권한 필요시)
  $sudo dnf install mariadb-server

참고:
https://fedoraproject.org/wiki/MariaDB


_____________________________________________________________________________________________________
_____________________________________________________________________________________________________
ftp (vsftp) 설치 :요새는 보안 때문에 비추천!! 
설치
  $yum install vsftpd -y

시작
  $systemctl start vsftpd
  $systemctl enable vsftpd

방화벽 설정
  $firewall-cmd --permanent --add-service=ftp
  $firewall-cmd --reload

ftp접속은 브라우저에서 
ftp://192.168.11.128
(root 계정)아이디 비번 치면 들어갈 수 있다.

환경설정
  $sudo vim /etc/vsftpd/vsftpd.conf

파일에서 anonymous_enable=NO 로 수정한 후 나온다.
* 저장은 : 누른 후 wq

재시작
  $systemctl restart vsftpd

그 다음
ftp를 이용할 계정을 하나 만들어 준다.
  $sudo useradd ftpuser   (ftpuser 명으로 계정 하나 만듬)
  $sudo passwd ftpuser    (ftpuser 의 비번 설정)
** 궁금할 때는 --help  (예: useradd --help)

다시 브라우저에서 접속
새로운 계정과 비번으로 접속할 수 있다.

home 다이렉트 보기
  $cat /etc/passwd | grep ftpuser
그러면 결과물로 /home/ftpuser 라고 나오는 것을 볼 수 있다.

금지 유저 리스트 보기 -리스트에 이름을 적으면 못들어 감
  $cat /etc/vsftpd/user_list

한번 ftp에 접속하게 되면 up to higher level directory 로 클릭해서 전체를 다 볼 수 있으므로 설정을 해줘야함 
  $sudo vim /etc/vsftpd/vsftpd.conf

#chroot_local_user=yes 이 부분이 주석 처리 되어 있는데 주석을 없애준다.

ftp 홈 디렉토리 바꾸기 (아파치 서버 홈디렉토리에서 바로 작업할 수 있게 만들고 싶었음..)
ftp 계정 홈 디렉토리를 /var/www/로 바꾸고 싶다면
  $sudo usermod --home /var/www ftpuser (계정이름)

다시 시작
  $systemctl restart vsftpd

(비추천!!: 아파치 서버의 홈디렉토리에 바로 ftp로 접근해서 업로드로 사용해보고 싶었는데 
좋은 방법이 아닌것 같다. (보안상)) - 결국 다시 원상태로 바꾸고, ftp로 사용 안하는 중
추후 더 공부가 필요!


_____________________________________________________________________________________________________
_____________________________________________________________________________________________________
vscode 설치하기
CentOS8 에서 VScode 설치하기
1.vscode 홈페이지에서 다운로드하기
2. Downloads 디렉토리에서 (or 다운받은 곳) 저장된 것을 rpm 명령어로 깔면 됨
예: rpm -ivh 파일명.rpm
  $rpm -ivh code-1.50.1-24.rpm
또는 (권한필요 시 )
  $sudo rpm -ivh code-1.50.1-24.rpm

**참고 자료: rpm으로 설치 시 (RedHat Package Manager)
  RPM is free and released under GPL (General Public License).
  RPM keeps the information of all the installed packages under /var/lib/rpm database.
  RPM is the only way to install packages under Linux systems, if you’ve installed packages using source code, then rpm won’t manage it.
  RPM deals with .rpm files, which contains the actual information about the packages such as: what it is, from where it comes, dependencies info, version info etc.
즉, 레드햇 리눅스 계열, CentOs, Fedora 등에서 프로그램 설치할 때 사용하지만 의존성 문제는 자동으로 해결해 주지 않아서 
사용자가 찾아서 해결해야하는 것으로 알고 있음. 
yum, dnf 등은 repository를 가지고 있어서 관련 의존성은 어느정도 해결해준다.  

**참고: dnf와 yum
We will be using the open-source package manager tool DNF, 
which stands for Dandified YUM the next-generation version of the Yellowdog Updater, Modified (that is, yum). 
DNF is a package manager that is now the default package manager for Red Hat based Linux systems like CentOS. 
It will let you install, update, and remove software packages on your server.

rpm 명령어 옵션 설명
-i : install a package
-v: verbose for a nicer display
-h: print hash marks as the package archive is unpacked

<트러블 슈팅 dependencies 에러 발생>
error: Failed dependencies:
	libXss.so.1()(64bit) is needed by code-1.50.1-1602601064.el7.x86_64
그러면 libXScrnSaver 설치해줘야 한다. 다행이도 친절하게 뭐가 필요한지 알려준다.
구글링 해보면 libXScrnSaver필요하다고 함. 이번에는 yum명령어로 설치 

-yum install libXScrnSaver
  $sudo yum install libXScrnSaver

필요한 의존성을 해결했기때문에 (설치로) 다시 rpm 명령어로 vscode를 설치한다
(다시 처음으로..)
  $sudo rpm -ivh code-1.50.1-24.rpm

**참고: rpm과는 다르게 yum/dnf명령어는 install을 요청하는 외부(인터넷?) repository에서 자동으로 다운 후 설치 해줌
이게 rpm 패키지랑은 다른 점 인 듯 (최신버전은 대개 repo에 없기 때문에 소스파일을 받아서 설치하는 방식으로 한다)


_____________________________________________________________________________________________________
_____________________________________________________________________________________________________
Postfix 설치
(현재: 일단 postfix는 지우고 다시 sendmail로 돌아감. 이유는 웹에서 메일을 mail()함수로 해결해보려고 했는데
거의 스팸메일로 들어가지거나 아예 차단되는 듯.. 그래서 이래저래 시도하다가 결국은 메일은 포기
라이브러리를 이용해서 보내는걸로 바꿈: swiftmailer 등.. )

참고설명:
Postfix is one of the most popular open-source Mail Transfer Agent (MTA) which route and delivers mails. 
It is an alternative to Sendmail MTA which comes pre-installed in all version before Centos/RHEL 5. 
CentOS Postfix installation is a process which requires a lot of precision.

일단 sendmail이 있다면 검색 후 제거 
  $rpm -qa | grep sendmail
있으면 지우는게 좋다. 
  $sudo yum remove sendmail*

그 다음 postfix 깔기
마찬가지로 rpm -qa | grep postfix 로 깔려 있는지 확인한 후 
  $sudo yum install postfix

postfix 설정
  $ sudo vim /etc/postfix/main.cf

주석 제거 후 추가
myhostname = mail.example.com
mydomain = example.com
myorigin = $mydomain

inet_interfaces = all 
(localhost 에서 all변경)
inet_protocols = all

mydestination = $myhostname, localhost.$mydomain, localhost
(주석처리제거)

mynetworks = 192.168.1.0/24, 127.0.0.0/8
추가 및 변경
home_mailbox = Maildir/
주석 제거

: 누른 후 qa 로 저장 후 나가기

재시작 및 자동으로 시작되게 등록
  $systemctl restart postfix
  $systemctl enable postfix


_____________________________________________________________________________________________________
_____________________________________________________________________________________________________
composer 설치 (php 관리도구 dependency)
다른 php라이브러리를 사용하려면 composer를 먼저 설치해야한다 (swiftmailer같은 것)
(아예 su 권한으로 시작는게 좋다)
  $su-

**참고 사이트
https://getcomposer.org/download/
Command-line installation 설치 법을 참고해서 할 것: 
웹 사이트에서 명령어를 입력하라고 나온대로 하면 됨, 위의 사이트 접속해볼 것

**설명 1~4까지 설명 본 후 (다음에 까먹었을 경우 ㅋ) 옵션 잘 넣어서 설치!!
1. php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
---->Download the installer to the current directory
---->현재 위치한 디렉토리에 받아지는거에 유의 (어차피 나중에 지워짐)

2.php -r "if (hash_file('sha384', 'composer-setup.php') === '756890a4488ce9024fc62c56153228907f1545c228516cbf63f885e036d37e9a59d27d63f46af1d4d07ee0f76181c7d3') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
---> Verify the installer SHA-384
---> 이 명령어 붙여넣기 하면 다운받은 인스톨러를 확인
---> 그러면 Installer verified 라고 나옴

**3. 주의: php composer의 디렉토리와 파일네임 변경 옵션인데 설명을 보고 한번에 옵션 넣어서 실행할 것
일단 이렇게 생김 --install-dir --filename 옵션 보고 실행할 것
3. php composer-setup.php
--->Run the installer
--->여기서 다른 옵션값을 넣어서 해주는것이 좋다. 
--->디렉토리와 파일이름이 composer.phar 기본값으로 되어 있어서 옵션으로 바꿔주는것이 좋다.(이번에 설치할때 디렉토리만 변경, 파일네임은 변경못함)
--->예: 
  첫번째 디렉토리 변경 옵션 --install-dir
  (You can install composer to a specific directory by using the --install-dir option and providing a target directory. Example:)
  예: $php composer-setup.php --install-dir=bin
  
  결과: 디렉토리 지정안했을 경우
    All settings correct for using Composer
    Downloading...
    Composer (version 2.0.8) successfully installed to: //composer.phar
    Use it: php composer.phar
  결과: 디렉토리 bin으로 지정했을 경우 아래처럼 나온다
    All settings correct for using Composer
    Downloading...
    Composer (version 2.0.8) successfully installed to: /usr/bin/composer.phar
    Use it: php bin/composer.phar

  파일 네임 변경 옵션 --filename
  (You can specify the filename (default: composer.phar) using the --filename option. Example:)
  $php composer-setup.php --filename=composer

  (tutorial로 알려주는 곳에서 거의 명령어를 composer로 알려줘서 실행을 해도 --filename으로 옵션을 안했다면
  composer명령어 실행할 떄 그런 명령어 없다고 에러;;; ㅡㅡ; 그때는 composer.phar 로 쳐야한다)
  즉 실행 3번에서 --filename 옵션에 따라 달라진다

4. php -r "unlink('composer-setup.php');"
Remove the installer 인스톨러를 지워준다

_____________________________________________________________________________________________________
_____________________________________________________________________________________________________
composer를 이용해서 Swift Mailer 다운로드
**참고내용:
---swift mailer 기능은 
Swift Mailer can be used with any PHP framework, and 
then easily integrated with an external SMTP like Gmail as well as popular email providers like Mandrill, 
SendGrid, or Mailgun.
원래 기본sendmail은 외부stpt를 허용 안한다고 하는데 외부smtp를 사용하기 위한 
요런게 가능하다고 함 
    create complex HTML/multipart templates 
    add attachments and embed images
    send emails via authenticated SMTP, sendmail, Postfix, or your own transport
    use additional plugins.
참고 사이트: 
https://blog.mailtrap.io/swiftmailer-sendmail/

**중요!!! 다운로드 그리고 디렉토리 이동해서 할것 그곳에서 설치가 됨
composer를 인스톨 할 때 --filename으로 이름변경 안했다면 디폴드는 composer.phar 임에 주의 
변경했다면 composer로만 쳐도 되고 아니면 composer.phar로 다 쳐줘야함 

설치 (composer.json에 추가)
  $sudo composer.phar require "swiftmailer/swiftmailer:^6.0"
또는 
  $ composer require "swiftmailer/swiftmailer:^6.0")
이렇게 하면 설치가 된다

지우기는 방법 예
For example, in the composer.json, 
let says we want to remove the yii2-date-range extension. 
Simply manually remove the “kartik-v/yii2-date-range”: “dev-master” line from the composer.json 
and save then run composer update in the terminal.

composer.json 파일을 열어 보면
"require": {
    "php": ">=5.4.0",
    "yiisoft/yii2": "~2.0.6",
    "yiisoft/yii2-bootstrap": "~2.0.0",
    "yiisoft/yii2-swiftmailer": "~2.0.0",
    "dmstr/yii2-adminlte-asset": "2.*",
    "yiisoft/yii2-jui": "*",
    "wbraganca/yii2-dynamicform": "*",
    "kartik-v/yii2-mpdf": "dev-master",   
    "miloschuman/yii2-highcharts-widget": "dev-master",
    "guzzlehttp/guzzle": ">=4.1.4 <7.0",
    "yiisoft/yii2-imagine": "^2.1",
    "kartik-v/yii2-date-range": "dev-master"  <<<-----만약에 이놈을 지운다고 하면 한줄 지우고 저장하기
},
요래 되어 있는데, 지운다음에 파일을 업데이트 하면 알아서 라이브러리를 지운다고 함
In the terminal, 
just run this command after removing the extension information in the composer.json. 
It may take a few minutes since the command may update other extensions in the composer.json as well.

$sudo composer.phar update 
를 하면 업데이트가 되면서 지워진다


_____________________________________________________________________________________________________
_____________________________________________________________________________________________________
파이썬 설치 
yum 으로 python 설치하기는 쉬움 (설치는 안해봄 ㅡㅡ)
  $sudo yum install python3
설치 후 버전 확인
  $python3 --version

하지만 최신 버전은 아니므로 소스파일을 받아서 시도
__________________________________________
install python on linux CentOs8 (최신버전 source파일로 받아서 설치하기)

일단 dependencies를 해결해 주기 위해서 필요한 것들을 미리 update 및 설치
아래 것들이 거의 다 필요 
참고: 일부러 3번째꺼 설치 안했더니 마지막 make 할때 error남

  $sudo yum -y update
  $sudo yum -y groupinstall "Development Tools"
  $sudo yum -y install openssl-devel bzip2-devel libffi-devel

python 사이트에서 최신 버전 다운로드 (tar 압축파일로 받으면 됨)
다운로드 디렉토리에서 압축 풀기
  $tar -xvf Python-파일명.tar
압축풀어진 디렉토리로 이동
  $cd Python어쩌구디렉토리

설정 스크립트를 실행
Setup installation by running the configure script.

  $./configure --enable-optimizations
그 다음 (시간 좀 걸림) 위의 작업이 완료 되면
  $sudo make altinstall 
(시간 더 걸림.. 만약 에러가 나거나 하면 해당 에러 메세지로 구글링!)

아래와 같이 나오면 설치 성공이라고 함
.....
copying build/scripts-3.8/pydoc3.8 -> /usr/local/bin
copying build/scripts-3.8/idle3.8 -> /usr/local/bin
copying build/scripts-3.8/2to3-3.8 -> /usr/local/bin
changing mode of /usr/local/bin/pydoc3.8 to 755
changing mode of /usr/local/bin/idle3.8 to 755
changing mode of /usr/local/bin/2to3-3.8 to 755
rm /usr/local/lib/python3.8/lib-dynload/_sysconfigdata__linux_x86_64-linux-gnu.py
rm -r /usr/local/lib/python3.8/lib-dynload/__pycache__
/usr/bin/install -c -m 644 ./Misc/python.man \
	/usr/local/share/man/man1/python3.8.1
if test "xupgrade" != "xno"  ; then \
	case upgrade in \
		upgrade) ensurepip="--altinstall --upgrade" ;; \
		install|*) ensurepip="--altinstall" ;; \
	esac; \
	 ./python -E -m ensurepip \
		$ensurepip --root=/ ; \
fi
Looking in links: /tmp/tmpy9yqf1bp
Collecting setuptools
Collecting pip
Installing collected packages: setuptools, pip
Successfully installed pip-19.2.3 setuptools-41.2.0
요렇게 나오면 설치 성공!!

설치 했으니 버전확인, 참고로 버전 3.9를 설치함
  $python3.9 --version

pip 버전도 확인  (pip 이 무엇인고? 모름;;)
  $pip3.9 --version

**참고 pip은 다른프로그램 설치할 수 있게 해주는 관리 프로그램 같은 것?
예를 들어 mysql 같은 것들도 설치할 수 있게 해주는 것


make 한 후 이렇게 나옴 (추후 알아봐야할 듯)
  WARNING: The script easy_install-3.9 is installed in '/usr/local/bin' which is not on PATH.
  Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.
  WARNING: The script pip3.9 is installed in '/usr/local/bin' which is not on PATH.
  Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.


_____________________________________________________________________________________________________
_____________________________________________________________________________________________________
git 설치하기 (*쉽게)

패키지 업데이트 해준다 (시간이 좀 걸릴 수 있음)
  $sudo dnf update -y

그 다음 설치
  $sudo dnf install git -y

_____________________________________________________________________________________________________
_____________________________________________________________________________________________________
git 설치하기 (최신버전 ***어렵게)

일단 의존성 해결해주기 위해서 필요한 프로그램 설치해주기
  $sudo dnf install gettext-devel openssl-devel perl-CPAN perl-devel zlib-devel gcc autoconf curl-devel expat-devel -y

**참고:
Git을 깔기위해서 dependencies를 해결해줘야하기 때문에 위에 것들을(?) 업데이트 해준다
Before you begin, you need to install the software that Git depends on. 
This is all available in the default repositories, 
so we can update our local package index and then install the packages.

설치되어 있거나 한 것은 빼고 설치함. 나중에 소스파일 빌드? 할 때 에러나면 구글링해서 필요한 프로그램 깔아주기

source파일 다운받기
깃 사이트에서 git-2.9.5.tar.xz 로 소스파일 다운로드 함
그다음 압축풀기
  $tar -xvf git-2.9.5.tar.xz 

그 다음에 디렉토리로 이동해서 make를 해준다 (시간 좀 걸림)
  $make prefix=/usr/local all
  $sudo make prefix=/usr/local install
중간에 에러가 나면 대게는 dependency가 문제 (구글링 해볼 것)

make가 완료되면 버전확인해보면 설치가 잘 되었는지 알 수 있음
  $git --version
git version 2.9.5 라고 나오면 ok!

_____________________________________________________________________________________________________
_____________________________________________________________________________________________________
폰트추가하기

기본 home디렉토리로 이동 시킴 (/home/계정$user/로 이동 후 fonts 디렉토리 만들어주기
숨김디렉토리로 .fonts 로 만들면 됨
$mkdir .fonts
숨기파일 확인
$ls -la 

폰트 다운받기, 압축이면 압축풀고 ttf 파일을 
$mv example_fontfile_name.ttf /home/$user/.fonts/
(여기에서 폰트 이름이 길면 확장자가 안나올 수 있으므로 잘 확인할 것)

그리고 명령어 실행
$fc-cache -v
$fc-cache-64 -v
succeeded 라고 나오면 완료!

**참고
DESCRIPTION
       fc-cache scans the font directories on the system and builds font information cache files for applications  using  fontconfig
       for their font handling.

       If  directory  arguments  are  not  given,  fc-cache uses each directory in the current font configuration. Each directory is
       scanned for font files readable by FreeType. A cache is created which contains properties of each  font  and  the  associated
       filename.  This cache is used to speed up application startup when using the fontconfig library.

       Note that fc-cache must be executed once per architecture to generate font information customized for that architecture.

참고로 x-윈도우(?)에서 font 프로그램에서 검색해보면 잘 설치되었는지를 확인가능
여기에 폰트 파일을 드래그하면 설치 되는지는 다음에 한번 해봐야겠음