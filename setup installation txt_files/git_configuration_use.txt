Git 환경 설정 및 명령어 사용

깃허브 처음 리포지터리 만들고 첫 add, commit, push 까지 하기
echo "# myBlogProject" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add myblog https://github.com/terrificmn/myBlogProject.git
git push -u myblog main
헛깔리까봐 remote를 orgin 대신에 myblog로 해서 등록함 
기존에 공부하는 깃허브는 origin이어서 괜히 착각할 것 같아서 

**설명: 
  git branch -M main 는 oldbranch명을 바꾸는 것 아마도 master에서 main으로

*새로운 리포지터리 만듬 (08Mar, 2021)
-u 옵션이랑


vscode 열기 (자동으로 열림)
  $code .

help옵션 사용하기
$git 명령어 --help
그러면 매뉴얼 페이지가 브라우저로 열린다


에디터 등록하기, 여기서 --global 옵션을 주어서 editor 선택
  $git config --global core.editor "code --wait"
또는 
  $git config --global core.editor "code"

**참고: 
예를 들어, "code --wait"은 vscode 의미하고, "atom --wait"는 아톰 에디터임

***참고: --wait의 차이점은 git config파일을 열어 볼려고 할 때 
vscode에디터에서 환경설정 파일이 열리고 터미널에서 또 작업을 할 수 있으나 
--wait 옵션을 주면 환경설정 파일이 저장을 하고 끄기전에는 터미널에서 작업을 할 수 없음 (즉, 터미널이 wait중)
--wait 옵션을 추천!

코드에디터로 환경설정 파일 열기
  $git config --global -e

이름과 이메일 등록
  $git config --global user.name "Your Name"
  $git config --global user.email "youremail@domain.com"

configuration 확인
  $git config --list
또는 
  $git config --global --list

리눅스는 input으로 설정
  $git config --global core.autocrlf input
또는 윈도우는 true로 설정
  $git config --global core.autocrlf true

**참고: core.autocrlf 줄바꿈이 일어날 때 
윈도우에서는 text \r\n (carriage-return)과 (new line feed) 일어나는 데 (줄바꿈할 때)
리눅스나 맥에서는 text \n (carriage-return)이 발생하지 않고 (new line feed)만 되므로 
윈도우와 리눅스에 서로 작업할 때 core.autocrlf 에서 자동으로 윈도우에서 저장할 때는 \r\n을 해주고
맥이나 리눅스에서는 \n 해준다고 함

리눅스는 input , 윈도우에서는 true로 설정해줘야지,
윈도우에서 작업했을 때와 리눅스에서 했을 때 서로 문제가 없도록 해준다고 함

한글파일명이 354\213\234\354\236\221.txt 이런식으로 나올 때 설정해주기

  $git config --global core.quotepath false

**참고: "" \ \t \n \\ 항상 escape 되어 지는데 
한글 인코딩이 utf-8에 들어가서 큰 바이트를 가지면 unsual 상태로 바뀌게 되어서 그렇다고 함
기본값인 true에서 false로 바꾸면 0x80보다 크더라도 unsual상태로 안된다고 함
뭐.. 그렇다고 함......


remote (원격 저장소) 연결하기
  $git remote add origin https://github.com/(본인계정or계정)/(repository_name)coding.git

이렇게 origin으로 한번 저장해놓으면 다음부터는 origin만 사용해서 remote에 접속해진다

등록한 원격저장소 지우기
  $git remote remove origin

____________________________________________________________________________________________________
_____________________________________________________________________________________________________
git 주요 명령어

일단 깃을 사용할 디렉토리를 만들어 준다
  $mkdir projects

해당 디렉토리 이동 cd git 으로 이동해서 초기화시키기 (repositiory 만들어 줌)
  $cd projects
  $git init

Initialized empty Git repository in /home/sgtocta/projects/git/.git/
이렇게 나옴, local에 git 할 준비가 된 것 임

파일 보기 (숨긴파일도 보기)
  $ls -al 해서 보면
drwxrwxr-x. 7 sgtocta sgtocta 119 Jan 11 07:36 .git
.git 요렇게 숨어 있음

git 지우려면 
  $rm -rf .git

깃 상태 보기
  $git status

자주 쓰는 명령어 alias 설정하기
(alias.단축으로쓸별칭 실제명령어)
  $git config --global alias.st status

깃 사용하다가 수정된 부분 버리기 
(add 하기전에 working directory에서 작업 중인 내용
즉, modified상태일 떄 반영하기 싫고 예전으로 돌아갈 떄)
예: git checkout filename 
$ git checkout resources/views/blog/create.blade.php

이러면 파일이 수정하기 전 상태로 돌아간다. 지워지는것은 아님

실 사용은 모르고 push (학교에서) 를 안한 상태에서 작업을 하려고 했더니 최신화가 안되어 있음
현재 집에서는 pull 해도 예전 최신상태.. 
작업은 하고 싶고, 그래서 일단 작업을 하고 수정된 내용을 따로 저장해둔다음에 
충돌을 방지하기 위해서 다시 작업내용을 discard 시킴
이제 최신본에 수정한거 합친다음에 push 하면 되겠다

아마 이럴 때 branch를 사용하는 거 같은데, 잘몰라서;; 일단 이런 방식으로 
근데 branch도 서로 같은 파일은 수정하는것은 아닐것같기도 하고;; 공부가 더 필요하다


____________________________________________________________________________________________________
____________________________________________________________________________________________________
실제 사용해 보기- 튜토리얼

일단 git 만들어진 디렉토리에서 a.txt b.txt c.txt를 만들어 본다
  $echo hello world! > a.txt
이런식으로 3개 만들고 

staus확인
  $git status
On branch master

Initial commit

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	a.txt
	b.txt
	c.txt

nothing added to commit but untracked files present (use "git add" to track)
이런식으로 나오게 되는데 
untracked files에 a,b,c.txt 파일이 있는 것을 알 수 있다

다음은 git add를 이용해서 tracked 으로 (commit할 준비를 해주는 것)
git add 파일명으로 staged filed로 추가
  $git add a.txt

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

	new file:   a.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	b.txt
	c.txt
이렇게 a.txt파일이 변경된 것을 볼 수 있음

  $git add a.txt b.txt 이런식으로 해도 되고
  $git add *.txt 라고 하면 모든파일.txt

  $git add .
git add . 위에처럼 하면 모든 파일을 add 시켜줌

여기에서 add된 파일을 수정하기
  $echo mike >> a.txt
로 파일에 내용을 추가하게 되면 git status에 수정되었다고 나옴

  $git status

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

	new file:   a.txt
	new file:   b.txt
	new file:   c.txt

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   a.txt
또 이렇게 나옴

즉 git add로 파일을 추가하게 되면 staged files이 되어서 staging area에 들어가게 되고
그런 파일을 수정하게 되면 그 파일은 modified file이 되어서 
untracked 상태로 되어져 있게 됨, 즉 버전 별로 파일이 존재하게 됨

다시 untracked 상태로 바꾸기
  $git rm --cached *

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	a.txt
	b.txt
	c.txt
요렇게 된 것을 알 수 있음

만약 파일이 디렉토리 안에 있을 경우 
fatal: not removing 'phpClass/includes' recursively without -r
에러가 발생

[sgtocta@localhost projects]$ git rm -r --cached *
usage: git rm [<options>] [--] <file>...

    -n, --dry-run         dry run
    -q, --quiet           do not list removed files
    --cached              only remove from the index
    -f, --force           override the up-to-date check
    -r                    allow recursive removal
    --ignore-unmatch      exit with a zero status even if nothing matched
이때에는 -r 옵션을 해줘야하고 --cached 를 꼭 써야함 (index에서 제거하는것은 staging area에서 제거하는 것)
--cached를 안사용하면 파일이 지워질 수도 있다. 

예:
git rm --cached .env
use --cached to keep the file, or -f to force removal
이래야 --cached 옵션을 줘야지 파일이 안 지워진다, -f 옵션이면 파일 지워짐

위처럼 하면 add 한 후 취소를 한 것이 되서 git status를 하면
deleted: .env 
라고 나오지만 실제 파일은 지워지지는 않는다.




<트러블슈팅>
디렉토리가 포함되었을 때는 
  $git rm -r --cached phpClass/*
으로 해주면 됨


트랙킹 하기 싫은 파일 (추가하기 싫은 파일)은 .gitignore 에 넣어준다
예를 들어서 test.log 파일이 있다고 했을 때
  $echo test > test.log
  $echo *.log > .gitignore
을 하게 되면 
또는 그냥 vi로 연 후에 편집 후 저장해도 됨
  $vi .gitignore

  $ls -al 
.gitignore 이 생겨있고 
staus에서 untracked files 로만 나오고 test.log 파일을 추적이 안되고 있음을 알 수 있다
(.gitignore 에 파일형태로 추가할 수 있음)

.gitignore 파일 편집하기
파일에서는 주석 가능 #으로 주석
test.log
또는 특정확장자의 모든파일 
*.log

특정디렉토리 
build/

특정디렉토리의 특정 파일들
build/*.log 

특정디렉토리의 모든 파일
phpClass/uploads/*


변경된 사항 확인할 때는 
$git diff
파일이 변경되었다면 

diff --git a/a.txt b/a.txt
index 7a6f78f..4606027 100644
--- a/a.txt
+++ b/a.txt
@@ -1,2 +1,3 @@
 hello world!
 mike
+add txt
이런식으로 나옴
q를 누르면 빠져나온다

config파일 열어서 설정 추가해주기
  $git config --global -e
해서 vscode가 열리면 파일에 추가해줌
[diff]
	tool = vscode
[difftool "vscode"]
	cmd = code --wait --diff $LOCAL $REMOTE

저장하고 끔. 터미널에서 
$git difftool
이라고 치면 (modified 된 파일이 있다면
Viewing (1/1): 'a.txt'
Launch 'vscode' [Y/n]
으로 나오게 됨 y하면 vscode가 열림

staging area에 있는 파일들 볼려면
  $git difftool --staged

마찬가지로 해당파일을 vscode에서 열겠냐고 물어보고 열어서 확인하면 됨

드디어 commit하기
  $git commit
vscode로 staging area 에 있는 파일이 commit되기 위한 파일이 열림
그럼 맨 위에 Title과 Description을 넣어주고 저장하면 commit이 됨 
(git repository에 넘어가게됨)

아래 처럼 입력 (Title과 Description만 간략하게 적어주면 되는 듯)
Title

Description

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
#
# Initial commit
#
# Changes to be committed:
#	new file:   a.txt
#	new file:   b.txt
#	new file:   c.txt
#
# Changes not staged for commit:
#	modified:   a.txt
#
# Untracked files:
#	.gitignore
#

그리고 저장 후 끄기. 그러면..
[master (root-commit) b1b5c42] Title
 3 files changed, 4 insertions(+)
 create mode 100644 a.txt
 create mode 100644 b.txt
 create mode 100644 c.txt
b1b5c42 해쉬코드 앞부분과 Title이 나오게 됨 
그리고 3개 파일이 created 파일이 생겼다고 나옴

방금 커밋한 히스토리 보기
  $git log

commit b1b5c427d6a6d54043dc75c502e63b99a45dcdac
Author: mike <이메일@gmail.com>
Date:   Mon Jan 11 08:33:25 2021 -0800

    Title

    Description

실제 해쉬코드 전체와 만든사람, 날짜, 타이틀, 설명까지 나오게 됨

간단하게 commit 할때는 -m 을 넣어서 가능

일단 파일을 한개 더 추가한다고 가정하고 파일만든다음에 add
  $echo test add > d.txt
파일만들고 다시 git add  시켜줌
  $git add d.txt 

간단 버전 commit 하기
  $git commit -m "second commit"

[master b58d728] second commit
 1 file changed, 1 insertion(+)
 create mode 100644 d.txt
바로 실행되는 것을 알 수 있음

커밋 옵션에 -a를 붙이면 전부다 커밋하게 됨
(git add로 안하고 staging area와 working directory에 있는 전부다 
모든 게 맘에 든다고 했을 떄 )
  $git commit -am "third commit"

Add 취소하기
모든 file staging 취소하기
  $git reset 

git reset HEAD file명으로 add한 file을 취소할 수 있고 file명을 쓰지 않으면 전체 파일 취소가 된다!
(HEAD는 지금 현재 최신상태)


push 하기
로컬에서 commit이 되었고 remote repository에 업로드 하려면 push 명령어를 사용
  $git push origin main 

**참고: 현재 저장소에서는 main이 branch default로 되어 있음
원래 master였으나 인종차별언어로 main으로 바꾸기로 하였다고 함

그 밖에 Viewing branches (-a 옵션 모든 branches 보기)
  $git branch -a
*main
master 
이런식으로 나옴 (* 되어 있는 것이 default branch)

새로운 branch 만들기 (-b 옵션 뒤에는 만들고 싶은 브랜치명)
  $git checkout -b develop


이것은 oldbranch명을 바꾸는 것  (branch 만드는 것과는 다름)
$git branch -M main 

With a -m or -M option, <oldbranch> will be renamed to <newbranch>. 
If <oldbranch> had a corresponding reflog, 
it is renamed to match <newbranch>, 
and a reflog entry is created to remember the branch renaming. 
If <newbranch> exists, -M must be used to force the rename to happen.


Switched to a new branch 'develop'
이렇게 나옴

브랜치 바꾸기
  $git checkout master


_____________________________________________________________________________________________________
git 로컬파일 overwrite 하기

!! 매우 주의!!

git pull origin main 할 때 로컬 파일들이 있는 상태에서 git init을 하면
remote repo에서 pull 하게 되면 겹치는 파일들을 제거 한후 다시  pull을 하라고 나온다
현업에서는 이런일이 없겠지만;; 아마도? 

아직 라라벨을 완벽하게 모르겠는데 깃 허브에 올려서 집, 학교에서 작업하다 보니
학교에서 pull을 해서 작업을 하고 싶은데..;
라라벨을 일단 뉴 프로젝트를 해서 다운을 받아야하는데 
(프로젝트를 애초에 push할 때 gitignore에 의해서 모듈 및 파일 등이 다 안올라간 상태에서
작업한 것이라서, 아무것도 없는상태에서 git init을 하고 pull 하게 되면은 충돌은 없겠지만
실행이 안됨 ㅋㅋㅋ)

그래서 일단 라라벨 프로젝트를 만들고 pull을 받는데 
git pull myblog main   << remote을 myblog로 설정해놓은 것, main은 master라고 안하고 main으로 함
역시나 충돌
error: The following untracked working tree files would be overwritten by merge:
... 파일들..
Please move or remove them before you merge.
Aborting

이제부터는 주의!!
로컬에서 바뀐게 있다면 다 반영안된다. (커밋기준) 근데 untracked이면 그런 파일은 상관없음
그리고 나면
$ git fetch --all  <<<< 최신으로 업데이트됨 (리모트 리포로부터 최신을 다운로드하지만 merge / rebase를 안함)
그러면 Fetching myblog 라고 뜸, 이상태에서는 변한것은 없음
$ git checkout -b backup-main  <<< 백업용 만들기 브랜치 만들기 (사실은 git을 막 init한 상태라 브랜치가 없다? 그래서 하나만 생김
backup-main으로 생김, 그래서 백업의 의미로 쓸려면 브랜치를 하나 더 만들어야하는 듯)
$ git reset --hard myblog/main  << 리모트 리포 등록한 이름과 리모트 브랜치를 적어준다. 정석은 myblog가 origin
이제 reset은 리모트로부터 fetch한 것으로(다운로드받은것을) 바꾼다.
그리고 --hard옵션은 현재 로컬의 워킹트리에 있는 파일들을 리모트 리포지터리의 myblog/main의 파일로 바꿔주게 됨

HEAD is now at 05b4eef first updated blog 이라고 나오면서 
파일들이 생긴다 (드디어 원격과 같아짐)

git branch -m main ....> 다시 main으로 바꾸기



아래 설명
Explanation:

git fetch downloads the latest from remote without trying to merge or rebase anything.

Then the git reset resets the master branch to what you just fetched. The --hard option changes all the files in your working tree to match the files in origin/master
Maintain current local commits

[*]: It's worth noting that it is possible to maintain current local commits by creating a branch from master before resetting:

git checkout master
git branch new-branch-to-save-current-commits
git fetch --all
git reset --hard origin/master

After this, all of the old commits will be kept in new-branch-to-save-current-commits.
