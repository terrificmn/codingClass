페도라에서 LAMP 설치하기 
**참고: LAMP란?
  Linux
  Apache
  Mariadb (or mysql)
  Php

_____________________________________________________________________________________________________
_____________________________________________________________________________________________________
HTTPD (apache) 설치
  $ sudo dnf -y install httpd
서버 시작은
  $ systemctl start httpd.service 

참고
https://docs.fedoraproject.org/en-US/quick-docs/getting-started-with-apache-http-server/index.html


httpd 최신 버전  source 파일은 2.4.46 인데 
소스파일로 받아서 컴파일러 하려고 했더니 의존성 해결해야하는것이 꽤 많은 듯
APR 없다고 하고 아마도 APR-util 암튼 귀찮아서 

참고 컴파일-빌드-인스톨까지 잘 나와 있음
https://httpd.apache.org/docs/2.4/install.html

하지만..
그냥 yum으로 설치 
2.4.37 임


_____________________________________________________________________________________________________
_____________________________________________________________________________________________________
php 설치 (common extensions 포함)
  $ sudo dnf -y install php php-cli php-php-gettext php-mbstring php-mcrypt php-mysqlnd php-pear php-curl php-gd php-xml php-bcmath php-zip
아마 이렇게 하면 7.4버전 쯤이 깔림 

libxml2 가 없다고 할 때 
sudo yum install libxml2-devel

php 8.0 받기
---------------------

EPEL 받기 
EPEL, short for Extra Packages for Enterprise Linux, 라고 함
기본적으로 받을 수 없던 추가 패키지를 받을 수 있게 해줌 
$sudo yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm

Remi repository는 third-party 저장소이며, 7.2~버전 부터 8.0까지 제공 하는 듯
어쨋든 설치
$sudo yum install http://rpms.remirepo.net/enterprise/remi-release-8.rpm

$sudo yum module list PHP
맨 아래에 php remi-8.0 이 보일 것임

8.0버전 사용가능하게 만들기 (리셋, enable)
$sudo yum module reset php
$sudo yum module enable php:remi-8.0 

이제 설치
$sudo yum install php

아파치 서버 깔기
$sudo dnf install php php-cli php-common
만약 아파치 먼저 깔았다면 설치 되어 있다고 나오는

설치 PHP 8.0 for Nginx하려면 (이것도 web server 인듯 하다)
$sudo dnf install php php-cli php-common php-fpm
사용안하니깐 스킵 (설치 안함)

마지막으로 버전 확인
$php -v
PHP 8.0.2 ~~~ 나오면 설치 성공

$sudo systemctl restart httpd
그리고 /var/www/html/에 파일하나 test.php로 만들고 hello world라든가 phpinfo(); 찍어보면 됨




_____________________________________________________________________________________________________
_____________________________________________________________________________________________________
mariadb 설치 (3.10.3-27 버전 /2021년 2월 13일 확인)
<쉽게 설치 버전>
  $ dnf install mariadb-server
or (권한 필요시)
  $sudo dnf install mariadb-server

참고:
https://fedoraproject.org/wiki/MariaDB

------------------------------
centOS repo는 보수적으로 안정적으로 접근하기 때문에 최신버전은 없음
그래서 
최신버전으로 받으려면 (안정화 버전 10.5.9)
먼저 사이트 방문
https://downloads.mariadb.org/mariadb/repositories/#distro=CentOS&distro_release=centos8-amd64--centos8&mirror=yongbok&version=10.5

* 우분투 일 경우에는 위의 사이트에서 우분투로 바꿔주면 됨
그리고 하나씩 실행 시키면 됨 . 먼저 레포지터리 추가, 마리아디비 설치
오히려 레포지터리 추가 및 바로 sudo apt-get install mariadb 여서 편함;;;
이하 mysql_secure_installation은 센트오에스와 같음 (아래 참고)

아래의 목록을 파일로 만들어 준다
centOS 전용 YUM repository 라고 함
/etc/yum.repos.d/ 안에 넣어주는데 파일명은 MariaDB.repo 로 하면 됨

# MariaDB 10.5 CentOS repository list - created 2021-02-22 23:03 UTC
# http://downloads.mariadb.org/mariadb/repositories/
[mariadb]
name = MariaDB
baseurl = http://yum.mariadb.org/10.5/centos8-amd64
module_hotfixes=1
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1

위의 내용을 복사 붙여넣기 한다
$ sudo vi /etc/yum.repos.d/MariaDB.repo
파일이 없었으므로 저장하고 빠져나오면 repo파일 생성됨

리포지토리 리스트 보기 (dnf명령어로 해도 됨)
$ yum repolist
목록에서 MariaDB가 나오면 ok

그 다음은 설치
$sudo yum install MariaDB-server

시작 및 enable (자동시작) 만들기
$ systemctl start mariadb
$ systemctl enable mariadb

mariadb 잘 작동하는지 확인
$ systemctl status mariadb 

firewall 이 작동하고 있으면 firewall 규칙에 추가해 주기, 그리고 다시 시작
$ sudo firewall-cmd --permanent --add-service=mysql
$ sudo firewall-cmd --reload

마지막 마리아DB 셋팅
$ sudo mysql_secure_installation

맨 처음 Yes /No 에서 그냥 엔터누르고 진행
그 다음부터는 사이트 참고 (거의 yes)

참고 사이트 https://www.tecmint.com/install-mariadb-on-centos-8/

마리아DB 테스트
마리아DB의 root 로 로그인 (시스템 root아님, 위에서 처음 installation에서 설정했던 비번 입력하면 됨)
$ mysql -uroot -p
비번입력 후 

MairaDB [(none)]> 여기에 커맨드 입력
> select version();

그러면 version 정보가 뜸. 그러면 오키


_____________________________________________________________________________________________________
_____________________________________________________________________________________________________
ftp (vsftp) 설치 :요새는 보안 때문에 비추천!! 
설치
  $yum install vsftpd -y

시작
  $systemctl start vsftpd
  $systemctl enable vsftpd

방화벽 설정
  $firewall-cmd --permanent --add-service=ftp
  $firewall-cmd --reload

ftp접속은 브라우저에서 
ftp://192.168.11.128
(root 계정)아이디 비번 치면 들어갈 수 있다.

환경설정
  $sudo vim /etc/vsftpd/vsftpd.conf

파일에서 anonymous_enable=NO 로 수정한 후 나온다.
* 저장은 : 누른 후 wq

재시작
  $systemctl restart vsftpd

그 다음
ftp를 이용할 계정을 하나 만들어 준다.
  $sudo useradd ftpuser   (ftpuser 명으로 계정 하나 만듬)
  $sudo passwd ftpuser    (ftpuser 의 비번 설정)
** 궁금할 때는 --help  (예: useradd --help)

다시 브라우저에서 접속
새로운 계정과 비번으로 접속할 수 있다.

home 다이렉트 보기
  $cat /etc/passwd | grep ftpuser
그러면 결과물로 /home/ftpuser 라고 나오는 것을 볼 수 있다.

금지 유저 리스트 보기 -리스트에 이름을 적으면 못들어 감
  $cat /etc/vsftpd/user_list

한번 ftp에 접속하게 되면 up to higher level directory 로 클릭해서 전체를 다 볼 수 있으므로 설정을 해줘야함 
  $sudo vim /etc/vsftpd/vsftpd.conf

#chroot_local_user=yes 이 부분이 주석 처리 되어 있는데 주석을 없애준다.

ftp 홈 디렉토리 바꾸기 (아파치 서버 홈디렉토리에서 바로 작업할 수 있게 만들고 싶었음..)
ftp 계정 홈 디렉토리를 /var/www/로 바꾸고 싶다면
  $sudo usermod --home /var/www ftpuser (계정이름)

다시 시작
  $systemctl restart vsftpd

(비추천!!: 아파치 서버의 홈디렉토리에 바로 ftp로 접근해서 업로드로 사용해보고 싶었는데 
좋은 방법이 아닌것 같다. (보안상)) - 결국 다시 원상태로 바꾸고, ftp로 사용 안하는 중
추후 더 공부가 필요!


_____________________________________________________________________________________________________
_____________________________________________________________________________________________________
vscode 설치하기
CentOS8 에서 VScode 설치하기
1.vscode 홈페이지에서 다운로드하기
2. Downloads 디렉토리에서 (or 다운받은 곳) 저장된 것을 rpm 명령어로 깔면 됨
예: rpm -ivh 파일명.rpm
  $rpm -ivh code-1.50.1-24.rpm
또는 (권한필요 시 )
  $sudo rpm -ivh code-1.50.1-24.rpm

**참고 자료: rpm으로 설치 시 (RedHat Package Manager)
  RPM is free and released under GPL (General Public License).
  RPM keeps the information of all the installed packages under /var/lib/rpm database.
  RPM is the only way to install packages under Linux systems, if you’ve installed packages using source code, then rpm won’t manage it.
  RPM deals with .rpm files, which contains the actual information about the packages such as: what it is, from where it comes, dependencies info, version info etc.
즉, 레드햇 리눅스 계열, CentOs, Fedora 등에서 프로그램 설치할 때 사용하지만 의존성 문제는 자동으로 해결해 주지 않아서 
사용자가 찾아서 해결해야하는 것으로 알고 있음. 
yum, dnf 등은 repository를 가지고 있어서 관련 의존성은 어느정도 해결해준다.  

**참고: dnf와 yum
We will be using the open-source package manager tool DNF, 
which stands for Dandified YUM the next-generation version of the Yellowdog Updater, Modified (that is, yum). 
DNF is a package manager that is now the default package manager for Red Hat based Linux systems like CentOS. 
It will let you install, update, and remove software packages on your server.

rpm 명령어 옵션 설명
-i : install a package
-v: verbose for a nicer display
-h: print hash marks as the package archive is unpacked

** 참고 : 우분투에서 deb 파일 설치하기
먼저 deb 파일을 vscode홈페이지에서 다운로드

똑같이 apt 명령어로 설치하면 됨
$sudo apt install ./code_15.3..생략.deb


<트러블 슈팅 dependencies 에러 발생>
error: Failed dependencies:
	libXss.so.1()(64bit) is needed by code-1.50.1-1602601064.el7.x86_64
그러면 libXScrnSaver 설치해줘야 한다. 다행이도 친절하게 뭐가 필요한지 알려준다.
구글링 해보면 libXScrnSaver필요하다고 함. 이번에는 yum명령어로 설치 

-yum install libXScrnSaver
  $sudo yum install libXScrnSaver

필요한 의존성을 해결했기때문에 (설치로) 다시 rpm 명령어로 vscode를 설치한다
(다시 처음으로..)
  $sudo rpm -ivh code-1.50.1-24.rpm

**참고: rpm과는 다르게 yum/dnf명령어는 install을 요청하는 외부(인터넷?) repository에서 자동으로 다운 후 설치 해줌
이게 rpm 패키지랑은 다른 점 인 듯 (최신버전은 대개 repo에 없기 때문에 소스파일을 받아서 설치하는 방식으로 한다)


_____________________________________________________________________________________________________
_____________________________________________________________________________________________________
Postfix 설치
(현재: 일단 postfix는 지우고 다시 sendmail로 돌아감. 이유는 웹에서 메일을 mail()함수로 해결해보려고 했는데
거의 스팸메일로 들어가지거나 아예 차단되는 듯.. 그래서 이래저래 시도하다가 결국은 메일은 포기
라이브러리를 이용해서 보내는걸로 바꿈: swiftmailer 등.. )

참고설명:
Postfix is one of the most popular open-source Mail Transfer Agent (MTA) which route and delivers mails. 
It is an alternative to Sendmail MTA which comes pre-installed in all version before Centos/RHEL 5. 
CentOS Postfix installation is a process which requires a lot of precision.

일단 sendmail이 있다면 검색 후 제거 
  $rpm -qa | grep sendmail
있으면 지우는게 좋다. 
  $sudo yum remove sendmail*

그 다음 postfix 깔기
마찬가지로 rpm -qa | grep postfix 로 깔려 있는지 확인한 후 
  $sudo yum install postfix

postfix 설정
  $ sudo vim /etc/postfix/main.cf

주석 제거 후 추가
myhostname = mail.example.com
mydomain = example.com
myorigin = $mydomain

inet_interfaces = all 
(localhost 에서 all변경)
inet_protocols = all

mydestination = $myhostname, localhost.$mydomain, localhost
(주석처리제거)

mynetworks = 192.168.1.0/24, 127.0.0.0/8
추가 및 변경
home_mailbox = Maildir/
주석 제거

: 누른 후 qa 로 저장 후 나가기

재시작 및 자동으로 시작되게 등록
  $systemctl restart postfix
  $systemctl enable postfix


_____________________________________________________________________________________________________
_____________________________________________________________________________________________________
composer 설치 (php 관리도구 dependency)
다른 php라이브러리를 사용하려면 composer를 먼저 설치해야한다 (swiftmailer같은 것)
(아예 su 권한으로 시작는게 좋다)
  $su-

**참고 사이트
https://getcomposer.org/download/
Command-line installation 설치 법을 참고해서 할 것: 
웹 사이트에서 명령어를 입력하라고 나온대로 하면 됨, 위의 사이트 접속해볼 것

원래 사이트에 나와있는 스탠다드로 깔면
$php composer.phar 로 실행해야 함
터미널 어디에서든 하고 싶을 때는 

composer.phar 파일을 이동시켜준다
$mv composer.phar /usr/local/bin/composer
참고
https://getcomposer.org/doc/00-intro.md#globally
우분투에서는 잘 됨
그냥 매뉴얼 사이트에서 나온 그대로 설치하되
3번째 설치할 때 --filename 만 준다음에 설치 
php composer-setup.php --filename=composer 
그러면 현재 위치에 composer파일이 다운되는데
그 파일을 /usr/local/bin/composer로 이동시키면 composer만 입력해도 전역에서 사용할 수 있게 된다
* 아니면 --install-dir=/usr/local/bin
으로 하면 되겠음
암튼 centOS 8과 경로가 다름에 주의!


지울 때 (우분투의 경우)
rm /usr/local/bin/composer

**설명 1~4까지 설명 본 후 (다음에 까먹었을 경우 ㅋ) 옵션 잘 넣어서 설치!!
1. php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
---->Download the installer to the current directory
---->현재 위치한 디렉토리에 받아지는거에 유의 (어차피 나중에 지워짐)

2.php -r "if (hash_file('sha384', 'composer-setup.php') === '756890a4488ce9024fc62c56153228907f1545c228516cbf63f885e036d37e9a59d27d63f46af1d4d07ee0f76181c7d3') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
---> Verify the installer SHA-384
---> 이 명령어 붙여넣기 하면 다운받은 인스톨러를 확인
---> 그러면 Installer verified 라고 나옴

**3. ***중요***
  주의: php composer의 디렉토리와 파일네임 변경 옵션인데 설명을 보고 한번에 옵션 넣어서 실행할 것
일단 이렇게 생김 --install-dir --filename 옵션 보고 실행할 것
3. php composer-setup.php
--->Run the installer
--->여기서 다른 옵션값을 넣어서 해주는것이 좋다. 
--->디렉토리와 파일이름이 composer.phar 기본값으로 되어 있어서 옵션으로 바꿔주는것이 좋다.(이번에 설치할때 디렉토리만 변경, 파일네임은 변경못함)
--->예: 
  첫번째 디렉토리 변경 옵션 --install-dir
  (You can install composer to a specific directory by using the --install-dir option and providing a target directory. Example:)
  예: $php composer-setup.php --install-dir=bin

  결과: 디렉토리 지정안했을 경우
    All settings correct for using Composer
    Downloading...
    Composer (version 2.0.8) successfully installed to: //composer.phar
    Use it: php composer.phar
  결과: 디렉토리 bin으로 지정했을 경우 아래처럼 나온다
    All settings correct for using Composer
    Downloading...
    Composer (version 2.0.8) successfully installed to: /usr/bin/composer.phar
    Use it: php bin/composer.phar

*** 우분투에서는 --install-dir을 /usr/local/bin 으로 해줘야 함
php composer-setup.php --filename=composer --install-dir=/usr/local/bin
directory /usr/local/bin is not writable 이라고 하면
sudo 로 진행

install-dir 옵션을 잘 지정하면 경로 어디에서나 composer라고 하면 잘 된다
php composer 라고 안 해도 됨
옵션을 지정 안하면 php composer 라고 해야하는 듯 하나, 다른 라이브러리 등에서 잘 실행이 안되서 곤란해질 수 있다


  파일 네임 변경 옵션 --filename
  (You can specify the filename (default: composer.phar) using the --filename option. Example:)
  $php composer-setup.php --filename=composer

  (tutorial로 알려주는 곳에서 거의 명령어를 composer로 알려줘서 실행을 해도 --filename으로 옵션을 안했다면
  composer명령어 실행할 떄 그런 명령어 없다고 에러;;; ㅡㅡ; 그때는 composer.phar 로 쳐야한다)
  즉 실행 3번에서 --filename 옵션에 따라 달라진다

4. php -r "unlink('composer-setup.php');"
Remove the installer 인스톨러를 지워준다

5. 결론
이번에 다시 설치할 때 (on 25Feb 2021) 
$php composer-setup.php --install-dir=bin --filename=composer
로 했으나 The defined install dir (bin) does not exist.이 없다고 나와서 
아예 경로를 /usr/bin 지정해서 설치함
$php composer-setup.php --install-dir=/usr/bin --filename=composer

결과
ll settings correct for using Composer
Downloading...

Composer (version 2.0.11) successfully installed to: /usr/bin/composer
Use it: php /usr/bin/composer


-------------------------------------------------------------------------------------
Laravel 설치 
참고사이트 :
https://laravel.com/docs/8.x/installation#getting-started-on-linux

composer가 먼저 설치되어 있어야 함
그 다음 

설치하기
$composer global require laravel/installer

****참고:
우분투에서는 php composer라고 입력해야함

그러면
Changed current directory to /home/sgtocta/.config/composer
6개의 패키지를 설치 sympony, laravel ...etc
Installing dependencies
등을 해줌 

버전은 4.1 

$ laravel
이라고 입력하면 명령어를 못 찾음
bash: laravel: command not found...

그래서 이제 $PATH 변수에 넣어서 Laravel만 쳐도 실행이 되도록 만들어줘야함
일단

라라벨이 실행가능하게 파일은 
리눅스라면 
$HOME/.config/composer/vendor/bin or $HOME/.composer/vendor/bin
위 둘 중 한 곳인데 

***참고:
우분투도 경로가 
~/.config/composer/vendor/bin 에 laravel이 들어 있음


$HOME 변수에는 유저 디렉토리 경로가 들어가 있음
그래서 홈 경로로 간 후에 찾아보면 
$cd ~ 또는 $cd ~/.composer
어쨋든 composer 까지 쳐보면 아니 쳐보기 전에라도 탭을 누르면 자동완성이 안됨
디렉토리가 없음

위의 디렉토리 중에 .config 디렉토리 안에 들어가 있음을 나중에 알게 됨

많은 사이트 튜토리얼에서는 .composer/ 안 경로로 설명하는데 그 쪽에 안깔려있으니
경로를 먼저 확인해야함


( 정확하지는 않지만 처음에는 composer를 설치한 후 실행을 안해서 그런가 
위의 두곳의 경로다 없었던 같은데..
암튼 컴포저를 일단 한번 실행해보고
$composer
그 다음에 확인해 보니 .config/composer/....생략 안에 생성되어 있음 )

암튼 다시 돌아와서 
이제 $PATH 를 등록? 해줘야함
$vi ~/.bashrc
편집기에서 맨 아래줄에 아래와 같은 코드를 입력

# laravel
export PATH="$HOME/.config/composer/vendor/bin:$PATH"

그리고 :wq
$source ~/.bashrc 

그러면 업데이트가 되어서 echo명령어로 확인해보면 등록이 되어 있음
$echo $PATH

/home/내계정/.config/composer/vendor/bin:/home/내계정/.composer/vendor/bin: ...생략

이제 라라벨 실행해보기
$laravel

그러면 버전정보와 help 옵션이 뜨면 오키

----------------
프로젝트 디렉토리 만드는 것부터 시작하기






$echo $PATH
/home/sgtocta/anaconda3/bin:/home/sgtocta/anaconda3/condabin: ...생략
를 해보면 laravel 경로가 안보임 

그래서 






_____________________________________________________________________________________________________
_____________________________________________________________________________________________________
composer를 이용해서 Swift Mailer 다운로드
**참고내용:
---swift mailer 기능은 
Swift Mailer can be used with any PHP framework, and 
then easily integrated with an external SMTP like Gmail as well as popular email providers like Mandrill, 
SendGrid, or Mailgun.
원래 기본sendmail은 외부stpt를 허용 안한다고 하는데 외부smtp를 사용하기 위한 
요런게 가능하다고 함 
    create complex HTML/multipart templates 
    add attachments and embed images
    send emails via authenticated SMTP, sendmail, Postfix, or your own transport
    use additional plugins.
참고 사이트: 
https://blog.mailtrap.io/swiftmailer-sendmail/

**중요!!! 다운로드 그리고 디렉토리 이동해서 할것 그곳에서 설치가 됨
composer를 인스톨 할 때 --filename으로 이름변경 안했다면 디폴드는 composer.phar 임에 주의 
변경했다면 composer로만 쳐도 되고 아니면 composer.phar로 다 쳐줘야함 

설치 (composer.json에 추가)
  $sudo composer.phar require "swiftmailer/swiftmailer:^6.0"
또는 
  $ composer require "swiftmailer/swiftmailer:^6.0")
이렇게 하면 설치가 된다

지우기는 방법 예
For example, in the composer.json, 
let says we want to remove the yii2-date-range extension. 
Simply manually remove the “kartik-v/yii2-date-range”: “dev-master” line from the composer.json 
and save then run composer update in the terminal.

composer.json 파일을 열어 보면
"require": {
    "php": ">=5.4.0",
    "yiisoft/yii2": "~2.0.6",
    "yiisoft/yii2-bootstrap": "~2.0.0",
    "yiisoft/yii2-swiftmailer": "~2.0.0",
    "dmstr/yii2-adminlte-asset": "2.*",
    "yiisoft/yii2-jui": "*",
    "wbraganca/yii2-dynamicform": "*",
    "kartik-v/yii2-mpdf": "dev-master",   
    "miloschuman/yii2-highcharts-widget": "dev-master",
    "guzzlehttp/guzzle": ">=4.1.4 <7.0",
    "yiisoft/yii2-imagine": "^2.1",
    "kartik-v/yii2-date-range": "dev-master"  <<<-----만약에 이놈을 지운다고 하면 한줄 지우고 저장하기
},
요래 되어 있는데, 지운다음에 파일을 업데이트 하면 알아서 라이브러리를 지운다고 함
In the terminal, 
just run this command after removing the extension information in the composer.json. 
It may take a few minutes since the command may update other extensions in the composer.json as well.

$sudo composer.phar update 
를 하면 업데이트가 되면서 지워진다


_____________________________________________________________________________________________________
_____________________________________________________________________________________________________
파이썬 설치 
yum 으로 python 설치하기는 쉬움 (설치는 안해봄 ㅡㅡ)
  $sudo yum install python3
설치 후 버전 확인
  $python3 --version

하지만 최신 버전은 아니므로 소스파일을 받아서 시도
__________________________________________
install python on linux CentOs8 (최신버전 source파일로 받아서 설치하기)

일단 dependencies를 해결해 주기 위해서 필요한 것들을 미리 update 및 설치
아래 것들이 거의 다 필요 
참고: 일부러 3번째꺼 설치 안했더니 마지막 make 할때 error남

  $sudo yum -y update
  $sudo yum -y groupinstall "Development Tools"
  $sudo yum -y install openssl-devel bzip2-devel libffi-devel

python 사이트에서 최신 버전 다운로드 (tar 압축파일로 받으면 됨)
다운로드 디렉토리에서 압축 풀기
  $tar -xvf Python-파일명.tar
압축풀어진 디렉토리로 이동
  $cd Python어쩌구디렉토리

설정 스크립트를 실행
Setup installation by running the configure script.

  $./configure --enable-optimizations
그 다음 (시간 좀 걸림) 위의 작업이 완료 되면
  $sudo make altinstall 
(시간 더 걸림.. 만약 에러가 나거나 하면 해당 에러 메세지로 구글링!)

아래와 같이 나오면 설치 성공이라고 함
.....
copying build/scripts-3.8/pydoc3.8 -> /usr/local/bin
copying build/scripts-3.8/idle3.8 -> /usr/local/bin
copying build/scripts-3.8/2to3-3.8 -> /usr/local/bin
changing mode of /usr/local/bin/pydoc3.8 to 755
changing mode of /usr/local/bin/idle3.8 to 755
changing mode of /usr/local/bin/2to3-3.8 to 755
rm /usr/local/lib/python3.8/lib-dynload/_sysconfigdata__linux_x86_64-linux-gnu.py
rm -r /usr/local/lib/python3.8/lib-dynload/__pycache__
/usr/bin/install -c -m 644 ./Misc/python.man \
	/usr/local/share/man/man1/python3.8.1
if test "xupgrade" != "xno"  ; then \
	case upgrade in \
		upgrade) ensurepip="--altinstall --upgrade" ;; \
		install|*) ensurepip="--altinstall" ;; \
	esac; \
	 ./python -E -m ensurepip \
		$ensurepip --root=/ ; \
fi
Looking in links: /tmp/tmpy9yqf1bp
Collecting setuptools
Collecting pip
Installing collected packages: setuptools, pip
Successfully installed pip-19.2.3 setuptools-41.2.0
요렇게 나오면 설치 성공!!

설치 했으니 버전확인, 참고로 버전 3.9를 설치함
  $python3.9 --version

pip 버전도 확인  (pip 이 무엇인고? 모름;;)
  $pip3.9 --version

**참고 pip은 다른프로그램 설치할 수 있게 해주는 관리 프로그램 같은 것?
예를 들어 mysql 같은 것들도 설치할 수 있게 해주는 것


make 한 후 이렇게 나옴 (추후 알아봐야할 듯)
  WARNING: The script easy_install-3.9 is installed in '/usr/local/bin' which is not on PATH.
  Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.
  WARNING: The script pip3.9 is installed in '/usr/local/bin' which is not on PATH.
  Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.


_____________________________________________________________________________________________________
_____________________________________________________________________________________________________
git 설치하기 (*쉽게)

패키지 업데이트 해준다 (시간이 좀 걸릴 수 있음)
  $sudo dnf update -y

그 다음 설치
  $sudo dnf install git -y

_____________________________________________________________________________________________________
_____________________________________________________________________________________________________
git 설치하기 (최신버전 ***어렵게)

일단 의존성 해결해주기 위해서 필요한 프로그램 설치해주기
  $sudo dnf install gettext-devel openssl-devel perl-CPAN perl-devel zlib-devel gcc autoconf curl-devel expat-devel -y

**참고:
Git을 깔기위해서 dependencies를 해결해줘야하기 때문에 위에 것들을(?) 업데이트 해준다
Before you begin, you need to install the software that Git depends on. 
This is all available in the default repositories, 
so we can update our local package index and then install the packages.

설치되어 있거나 한 것은 빼고 설치함. 나중에 소스파일 빌드? 할 때 에러나면 구글링해서 필요한 프로그램 깔아주기

source파일 다운받기
깃 사이트에서 git-2.9.5.tar.xz 로 소스파일 다운로드 함
그다음 압축풀기
  $tar -xvf git-2.9.5.tar.xz 

그 다음에 디렉토리로 이동해서 make를 해준다 (시간 좀 걸림)
  $make prefix=/usr/local all
  $sudo make prefix=/usr/local install
참고: 우분투에서는 $sudo make all install 까지만 해주면 됨 (버전 2.3.1버전쯤 됨)

중간에 에러가 나면 대게는 dependency가 문제 (구글링 해볼 것)

make가 완료되면 버전확인해보면 설치가 잘 되었는지 알 수 있음
  $git --version
git version 2.9.5 라고 나오면 ok!

_____________________________________________________________________________________________________
_____________________________________________________________________________________________________
폰트추가하기

기본 home디렉토리로 이동 시킴 (/home/계정$user/로 이동 후 fonts 디렉토리 만들어주기
숨김디렉토리로 .fonts 로 만들면 됨
$mkdir .fonts
숨기파일 확인
$ls -la 

폰트 다운받기, 압축이면 압축풀고 ttf 파일을 
$mv example_fontfile_name.ttf /home/$user/.fonts/
(여기에서 폰트 이름이 길면 확장자가 안나올 수 있으므로 잘 확인할 것)

그리고 명령어 실행
$fc-cache -v
$fc-cache-64 -v
succeeded 라고 나오면 완료!

**참고
DESCRIPTION
       fc-cache scans the font directories on the system and builds font information cache files for applications  using  fontconfig
       for their font handling.

       If  directory  arguments  are  not  given,  fc-cache uses each directory in the current font configuration. Each directory is
       scanned for font files readable by FreeType. A cache is created which contains properties of each  font  and  the  associated
       filename.  This cache is used to speed up application startup when using the fontconfig library.

       Note that fc-cache must be executed once per architecture to generate font information customized for that architecture.

참고로 x-윈도우(?)에서 font 프로그램에서 검색해보면 잘 설치되었는지를 확인가능
여기에 폰트 파일을 드래그하면 설치 되는지는 다음에 한번 해봐야겠음



---------------------------------------------------------------------------------------------------------------------------
아나콘다 설치
먼저 다운로드 
구글 anaconda download로 검색해서 individual Edition으로 다운로드하기
Linux 버전 64-Bit (x86) Installer
로 다운받으면 됨

참고 메뉴얼 사이트
https://docs.anaconda.com/anaconda/install/linux/
여기에 나온 방법대로 그대로 하는것이 좋음

인스톨 방법은 
먼저 dependencies 해결
레드헷 계열
sudo yum install libXcomposite libXcursor libXi libXtst libXrandr alsa-lib mesa-libEGL libXdamage mesa-libGL libXScrnSaver
이미 다 설치되어 있음 ;; 

다운로드 디렉토리로 이동 후 
SHA-256으로 데이터 확인작업
sha256sum /path/filename 형식인데
이미 다운로드 디렉토리로 진입을 했기에

sha256sum Anaconda3-2020.11-Linux-x86_64.sh
요렇게 입력

그 다음은
bash ~/Downloads/Anaconda3-2020.11-Linux-x86_64.sh

여기서 중요한 점은 
bash 라는 명령어는 그냥 써야하고 
다운로드 디렉토리에 파일이 없다면 경로는 바꿔주기 
그 다음은 엔터 밑 yes 만 눌러주면 설치가 된다

-----------------------------------------------------------------------------------------------


dbeaver 설치하기 (db tool)

홈피에서 다운로드
rpm 파일과 deb 파일을 제공

우분투에서는 
```
sudo dpkg -i dbeaver-<version_number>.deb
```

centos는 rpm으로 설치

실행은 
```
dbeaver &
```

dbeaver 도 되서
& 붙이면 어떻게 실행되는지는 안해봄


_____________________________________________________________________________________________________
phpmyadmin 설치

phpmyadmin에서 다운로드하기
https://www.phpmyadmin.net/downloads/

압축풀기 (버전에 맞는 파일명으로, tab으로 하면 편함)
$ tar xvf phpMyAdmin-${VER}-all-languages.tar.gz

압축푼 폴더채로 /usr/share/phpmyadmin 디렉토리로 이동해주기
$ sudo mv phpMyAdmin-{버전}/ /usr/share/phpmyadmin

tmp 디렉토리 만들어주기
그리고 이어서 사용자:그룹 지정
$sudo mkdir -p /var/lib/phpmyadmin/tmp
$sudo chown -R apache:apache /var/lib/phpmyadmin

어떤 블로그에는  /usr/share/phpmyadmin/tmp 로 만드는 방법도 있던데
딱히 경로는 중요하지 않은것 같다.. 나중에 한번 지워보고 어떻게 되나 해봐야겠다

이제 옮겨진 경로로 이동하자
$ cd /usr/share/phpmyadmin 
로 가보면 
config.sample.inc.php 파일이 있는데 
파일명을 바꾸거나 복사한다음에 config.inc.php 로 만든다

둘 중 하나 선택
$sudo cp /usr/share/phpmyadmin/config.sample.inc.php  /usr/share/phpmyadmin/config.inc.php
또는 
$sudo mv /usr/share/phpmyadmin/config.sample.inc.php  /usr/share/phpmyadmin/config.inc.php

vi나 vim 편집기로 열어서 내용 수정
$sudo vim /usr/share/phpmyadmin/config.inc.php

이제 열린 config.inc.php 파일의 내용 중에 수정할 부분이 있는데 
$cfg['blowfish_secret']  이 부분의 내용을 32 글자(32개) 이상으로 써 준다

이건 매뉴얼 홈피에 나와있는 방식대로 그대로 써줌
$cfg['blowfish_secret'] = '1{dd0`<Q),5XP_:R9UK%%8\"EEcyH#{o';

그리고 sql계정으로 (mariadb mysql:현재 사용하는 것) 
phpmyadmin으로 들어올 떄마다 매번 로그인해야하는데 그게 귀찮은 사람은
아래 처럼 설정해도 된다고 함

$cfg['Servers'][$i]['user']          = 'root';
$cfg['Servers'][$i]['password']      = 'changeme'; // 여기에 mysql 비번 적기
$cfg['Servers'][$i]['auth_type']     = 'config';

하지만 매뉴얼홈피에 보면 Warning! 이 있다
> Storing passwords in the configuration is insecure as anybody can then manipulate your database.
그래서 비번은 저장안하고 skip함

그리고 temp 디렉토리 설정
근데 cfg['TempDir']이 없다;; 그냥 하나 추가해주기
$cfg['TempDir'] = '/var/lib/phpmyadmin/tmp';

그리고 : 누르고 wq 를 눌러 저장하고 빠져나오기

이제는 아파치 웹 서버 설정파일 만들어주기
아마 없을 것이다.. 그래서 어차피 빈 파일로 만들면서 
저장될 듯

$sudo vim /etc/httpd/conf.d/phpmyadmin.conf

아래내용을 copy & paste
```
# Apache configuration for phpMyAdmin
Alias /phpMyAdmin /usr/share/phpmyadmin/
Alias /phpmyadmin /usr/share/phpmyadmin/
 
<Directory /usr/share/phpmyadmin/>
   AddDefaultCharset UTF-8
 
   <IfModule mod_authz_core.c>
     # Apache 2.4
     Require all granted
   </IfModule>
   <IfModule !mod_authz_core.c>
     # Apache 2.2
     Order Deny,Allow
     Deny from All
     Allow from 127.0.0.1
     Allow from ::1
   </IfModule>
</Directory>
```

대충 내용은 디렉토리 설정해주는 것이고 
127.0.0.1 localhost만 승인하고 나머지는 거부하게 해놓는 설정인듯하다
완벽히는 잘 모름
위의 
Alias 는 맨앞을 /phpmyadmin 과 /phpmyAdmin으로 되어 있는데 (중간에 대문자 A)
별칭을 자기 맘대로 해주면 됨
예를 들어 Alias /mydb /usr/share/phpmyadmin/ 로 하면 
phpmyadmin 접속할 때 localhost/mydb 이런식으로 하면 접속이 됨
아마도 phpmyadmin 이라는 것은 다 알기때문에 별칭으로 하면 보안상 좋다고 하는 것 
같다고 다른 블로그에서 봤는데, 흠.. 어차피 다른아이피는 못들어오게 되있어서 
상관없지 않나 싶다.. 잘 모르겠음. 아니면 짧게 /php 라고 해도 좋을 듯
어쨌든 저것도 그대로 skip ㅋㅋ 그대로 복붙 함

이건 확인용인데 아파치 설정 validate 라고 함
$ sudo apachectl configtest

맞게 설정했으면 Syntax OK 라고 나옴 

그리고 httpd 재시작
$sudo systemctl restart httpd

마지막 중요한 SELinux 설정
이거 무시했다가 계속 에러가 남
아마 SELinux를 관련 설정안하면 phpmyadmin 들어가면 Access Denied 라고 접속이 안될 것임

대개 centos는 enforcing 인가로 모드가 설정되어 있다고 함
그래서 퍼미션 거부 에러가 계속 난다. (접속 시도시에) 이것을 몰라서 포기했다가 
여담으로 dbeaver로 깔았다가 설치 쉽고 좋았는데, 
그러다가 다시 한번 시도해봤는데 이게 문제였다는것을 알게되었음

어쨌든...
/usr/share/phpmyadmin 를 httpd에 허용하게 끔 해주는 것이라고 함;;
$sudo semanage fcontext -a -t httpd_sys_content_t "/usr/share/phpmyadmin(/.*)?"

그리고 적용
$sudo restorecon -Rv /usr/share/phpmyadmin

방화벽도 허용해주기
$sudo firewall-cmd --add-service=http --permanent
그리고 이어서 리로드
$sudo firewall-cmd --reload

이제 끝

이제 접속하기 
브라우저에서 본인의 ip주소/phpmyadmin 하면 접속이 됨
그러면 db로 계정으로 로그인하면 완료!



------------------------------------------------------------------------------
우분투 한글 설치
Ubuntu 20.04 버전 

fcitx-hangul 설치 후 설정
```
$sudo apt-get install fcitx-hangul
```

지역 및 언어에서 입력 소스에서 추가 + 버튼을 누르면 한국어 Hangul 이라는 메뉴가 보이는데 
추가하고 설정하기



